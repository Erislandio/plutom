(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./expr", "./index-definition", "./column", "./constrain", "./func", "./tables", "./union", "./util"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./expr"), require("./index-definition"), require("./column"), require("./constrain"), require("./func"), require("./tables"), require("./union"), require("./util"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.expr, global.indexDefinition, global.column, global.constrain, global.func, global.tables, global.union, global.util);
    global.create = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _expr, _indexDefinition, _column, _constrain, _func, _tables, _union, _util) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createToSQL = createToSQL;

  function createDefinitionToSQL(definition) {
    if (!definition) return [];
    const {
      resource
    } = definition;

    switch (resource) {
      case 'column':
        return (0, _column.columnDefinitionToSQL)(definition);

      case 'index':
        return (0, _indexDefinition.indexDefinitionToSQL)(definition);

      case 'constraint':
        return (0, _constrain.constraintDefinitionToSQL)(definition);

      default:
        throw new Error(`unknow resource = ${resource} type`);
    }
  }

  function createTableToSQL(stmt) {
    const {
      type,
      keyword,
      table,
      like,
      as,
      temporary,
      if_not_exists: ifNotExists,
      create_definitions: createDefinition,
      table_options: tableOptions,
      ignore_replace: ignoreReplace,
      query_expr: queryExpr
    } = stmt;
    const sql = [(0, _util.toUpper)(type), (0, _util.toUpper)(temporary), (0, _util.toUpper)(keyword), (0, _util.toUpper)(ifNotExists), (0, _tables.tablesToSQL)(table)];

    if (like) {
      const {
        type: likeType,
        table: likeTable
      } = like;
      const likeTableName = (0, _tables.tablesToSQL)(likeTable);
      sql.push((0, _util.toUpper)(likeType), likeTableName);
      return sql.filter(_util.hasVal).join(' ');
    }

    if (createDefinition) {
      sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`);
    }

    if (tableOptions) {
      sql.push(tableOptions.map(_tables.tableOptionToSQL).join(' '));
    }

    sql.push((0, _util.toUpper)(ignoreReplace), (0, _util.toUpper)(as));
    if (queryExpr) sql.push((0, _union.unionToSQL)(queryExpr));
    return sql.filter(_util.hasVal).join(' ');
  }

  function createTriggerToSQL(stmt) {
    const {
      constraint,
      constraint_kw: constraintKw,
      deferrable,
      events,
      execute,
      for_each: forEach,
      from,
      location,
      keyword,
      type,
      table,
      when
    } = stmt;
    const sql = [(0, _util.toUpper)(type), (0, _util.toUpper)(constraintKw), (0, _util.toUpper)(keyword), (0, _util.identifierToSql)(constraint), (0, _util.toUpper)(location)];
    const event = (0, _util.triggerEventToSQL)(events);
    sql.push(event, 'ON', (0, _tables.tableToSQL)(table));
    if (from) sql.push('FROM', (0, _tables.tableToSQL)(from));
    sql.push(...(0, _util.commonKeywordArgsToSQL)(deferrable), ...(0, _util.commonKeywordArgsToSQL)(forEach));
    if (when) sql.push((0, _util.toUpper)(when.type), (0, _expr.exprToSQL)(when.cond));
    sql.push((0, _util.toUpper)(execute.keyword), (0, _func.funcToSQL)(execute.expr));
    return sql.filter(_util.hasVal).join(' ');
  }

  function createExtensionToSQL(stmt) {
    const {
      extension,
      from,
      if_not_exists: ifNotExists,
      keyword,
      schema,
      type,
      with: withName,
      version
    } = stmt;
    const sql = [(0, _util.toUpper)(type), (0, _util.toUpper)(keyword), (0, _util.toUpper)(ifNotExists), (0, _util.literalToSQL)(extension), (0, _util.toUpper)(withName)];
    if (schema) sql.push('SCHEMA', (0, _util.literalToSQL)(schema));
    if (version) sql.push('VERSION', (0, _util.literalToSQL)(version));
    if (from) sql.push('FROM', (0, _util.literalToSQL)(from));
    return sql.filter(_util.hasVal).join(' ');
  }

  function createToSQL(stmt) {
    const {
      keyword
    } = stmt;
    let sql = '';

    switch (keyword.toLowerCase()) {
      case 'table':
        sql = createTableToSQL(stmt);
        break;

      case 'trigger':
        sql = createTriggerToSQL(stmt);
        break;

      case 'extension':
        sql = createExtensionToSQL(stmt);
        break;

      default:
        throw new Error(`unknow create resource ${keyword}`);
    }

    return sql;
  }
});